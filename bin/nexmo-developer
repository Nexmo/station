#!/usr/bin/env ruby
require 'optparse'

clear_cache = false
rake_ci = false
rake_smartling_download = false
rake_smartling_upload = false

options = {}
docs_path = OptionParser.new do |opts|
  opts.banner = "Usage: nexmo-developer --docs='/path/to/docs'"
  opts.on("-d", "--docs=DOCS", "Specify path to documentation") do |v|
    if Dir.exist?(v)
      ENV['DOCS_BASE_PATH'] = v
      ENV['OAS_PATH'] ||= "#{v}/_open_api/definitions"
      puts "Documentation path: '#{v}' set successfully."
    else
      puts "Error: --docs parameter value must be equal to a directory containing documentation."
      exit
    end
  end
  opts.on("-h", "--help", "Prints help instructions") do
    puts opts
    exit
  end
  opts.on("--clear-cache", "Clear Rails cache") do
    clear_cache = true
  end
  opts.on("--rake-ci", "Runs ci tasks") do
    rake_ci = true
  end
  opts.on("--rake-smartling-download", "Runs Smartling download check") do
    rake_smartling_download = true
  end
  opts.on("--rake-smartling-upload", "Runs Smartling upload process") do
    rake_smartling_upload = true
  end
end.parse!

$LOAD_PATH.unshift(File.expand_path('../lib/nexmo_developer', __dir__))
APP_PATH = File.expand_path('../lib/nexmo_developer/config/application', __dir__)

require 'rails/all'
require 'activeadmin'
require 'bootsnap'
require 'bugsnag'
require 'devise'
require 'geocoder'
require 'gravatar_image_tag'
require 'greenhouse_io'
require 'recaptcha'
require 'split/dashboard'
require 'listen'
require 'inherited_resources'
require 'msgpack'
require 'pg'
require 'coffee-rails'
require 'octokit'
require 'webpacker'
require 'clipboard/rails'
require 'gmaps4rails'
require 'nexmo_markdown_renderer'
require 'truncato'
require 'puma'
require 'barnes'
require 'woothee'
require 'algoliasearch'
require 'rest-client'
require 'chartkick'
require 'groupdate'
require 'terminal-table'
require 'lograge'
require 'jbuilder'
require 'nokogiri'
require 'colorize'
require 'neatjson'
require 'slack-notifier'
require 'autoprefixer-rails'
require 'titleize'
require 'countries'
require 'country_select'
require 'smartling'
require 'newrelic_rpm'
require 'redis'
require 'rake'

require 'config/application'
require 'rails/command'

if clear_cache
  puts "Clearing Rails cache..."
  Rails::Command.invoke 'runner', ['Rails.cache.clear']
end

if rake_ci
  puts 'Running Rake tasks...'
  Rails.application.load_tasks
  Rails::Command.invoke 'runner', ["Rake::Task['db:setup'].invoke"]
  Rails::Command.invoke 'runner', ["Rake::Task['ci:all'].invoke"]
elsif rake_smartling_download
  puts 'Running Smartling download check...'
  Rails.application.load_tasks
  Rails::Command.invoke 'runner', ["Rake::Task['smartling:download'].invoke"]
elsif rake_smartling_upload
  puts 'Running Smartling upload process...'
  Rails.application.load_tasks
  Rails::Command.invoke 'runner', ["Rake::Task['smartling:upload'].invoke"]
else
  Rails::Command.invoke 'server'
end
